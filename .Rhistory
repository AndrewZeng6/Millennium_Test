res[x,]=as.integer(v>=as.character(df[x,"start"]) & v<as.character(df[x,"end"]))
}
res["sum",]=apply(res,2,sum)
#maximum intersection
df[,"s"]=sapply(rownames(res)[-length(rownames(res))],
function(x){max(as.integer(res["sum",as.integer(res[x,])>0]))})
#list id each row is intersecting with
for(x in rownames(df)){
df[x,"w"]=paste(as.character(df$id)[as.character(df$start)<as.character(df[x,"end"]) &
as.character(df$end)>as.character(df[x,"start"])],collapse=",")
}
return(df)
}
results=ddply(df,"anest",maxInterval)
write.csv(results,file="maxInterval.csv")
results
returns_raw=read.csv("input\\return.csv")
returns_raw
colnames(returns_raw)
optimalWeights=data.frame(matrix(nrow=12,ncol=dim(returns_raw)[2]-1),row.names = seq(1,12))
optimalWeights
library("dplyr")
library("plyr")
library("lubridate")
setwd("C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium")
returns_raw=read.csv("input\\return.csv")
returns_raw$Date=as.POSIXct(returns_raw$Date)#Convert to date time
returns=returns_raw[returns_raw$Date<as.POSIXct("2016-01-01"),]#only choose dates before 2016-01-01
a=0.05
weights=matrix(c(0.15,0.15,0.15,0.2,0.05,0.2,0.1),ncol=1)
N=252#annualize
eps=0.00001
C=cov(returns[,2:dim(returns)[2]])
returns$Portfolio=as.matrix(returns[,2:dim(returns)[2]]) %*% weights#Portfolio return
#Part 1: historical
VaR1=-quantile(returns$Portfolio,a)*sqrt(N)
CVaR1=sum(sapply(seq(eps,a,by=eps),function(x){-quantile(returns$Portfolio,x)*sqrt(N)})*eps)/a
#Part 2: parametric
mu=mean(returns$Portfolio)*N
sigma=sqrt(t(weights)%*%C%*%weights)*sqrt(N) #annual vol
VaR2=-mu+sigma*qnorm(1-a,mean=0,sd=1) #Assume normal distribution and iid
CVaR2=sum(sapply(seq(eps,a,by=eps),function(x){-mu+sigma*qnorm(1-x,mean=0,sd=1)})*eps)/a
#Part 3:dynamic optimization
optimalWeights=data.frame(matrix(nrow=12,ncol=dim(returns_raw)[2]-1),row.names = seq(1,12))
mu_monthly=mean(returns$Portfolio)*21
cov_monthly=C*21*21
cov_monthly
cov_monthly=C*21
cov_monthly
optimalWeights
optimalWeights=data.frame(matrix(nrow=12,
ncol=dim(returns_raw)[2]-1),row.names = seq(1,12))
colnames(optimalWeights)=colnames(returns_raw)[-1]
optimalWeights
rbind(c(1,1),c(2,2))
x0=matrix(1,ncol=dim(optimalWeights)[2],nrow=1)
x0
x0=matrix(1.0,nrow=dim(optimalWeights)[2],ncol=1)/dim(optimalWeights)[2]
x0
mu_monthly=mean(returns$Portfolio)*21
mu_monthly
library("dplyr")
library("plyr")
library("lubridate")
setwd("C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium")
returns_raw=read.csv("input\\return.csv")
returns_raw$Date=as.POSIXct(returns_raw$Date)#Convert to date time
returns=returns_raw[returns_raw$Date<as.POSIXct("2016-01-01"),]#only choose dates before 2016-01-01
a=0.05
weights=matrix(c(0.15,0.15,0.15,0.2,0.05,0.2,0.1),ncol=1)
N=252#annualize
eps=0.00001
C=cov(returns[,2:dim(returns)[2]])
mu_daily=colMeans(returns[,2:dim(returns)[2]])
mu_daily
mu_monthly=matrix(mu_daily*21,ncol=1)
mu_monthly
cov_monthly=matrix(C*21)
cov
cov_monthly
cov_monthly=C*21
cov_monthly
cov_monthly %*% mu_monthly
qnorm(0.95)
rbind(1,1)
library("dplyr")
library("plyr")
library("lubridate")
setwd("C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium")
returns_raw=read.csv("input\\return.csv")
returns_raw$Date=as.POSIXct(returns_raw$Date)#Convert to date time
returns=returns_raw[returns_raw$Date<as.POSIXct("2016-01-01"),]#only choose dates before 2016-01-01
a=0.05
weights=matrix(c(0.15,0.15,0.15,0.2,0.05,0.2,0.1),ncol=1)
N=252#annualize
eps=0.00001
C=cov(returns[,2:dim(returns)[2]])
mu_daily=colMeans(returns[,2:dim(returns)[2]])
returns$Portfolio=as.matrix(returns[,2:dim(returns)[2]]) %*% weights#Portfolio return
#Part 1: historical
VaR1=-quantile(returns$Portfolio,a)*sqrt(N)
CVaR1=sum(sapply(seq(eps,a,by=eps),function(x){-quantile(returns$Portfolio,x)*sqrt(N)})*eps)/a
#Part 2: parametric
mu=mean(returns$Portfolio)*N
sigma=sqrt(t(weights)%*%C%*%weights)*sqrt(N) #annual vol
VaR2=-mu+sigma*qnorm(1-a,mean=0,sd=1) #Assume normal distribution and iid
CVaR2=sum(sapply(seq(eps,a,by=eps),
function(x){-mu+sigma*qnorm(1-x,mean=0,sd=1)})*eps)/a
#Part 3:dynamic optimization
optimalWeights=data.frame(matrix(nrow=12,
ncol=dim(returns_raw)[2]-1),row.names = seq(1,12))
colnames(optimalWeights)=colnames(returns_raw)[-1]
mu_monthly=matrix(mu_daily*21,ncol=1)
cov_monthly=C*21
#calculate the optimal weight dynamically
coeff1=1#1+mu*w
coeff2=1#1+2mu*w+w*cov*w
z=qnorm(0.95)
ones=matrix(1.0,nrow=dim(optimalWeights)[2],ncol=1)
x0=ones/dim(optimalWeights)[2]#initial guess
for(n in seq(12,1,-1)){
obj<-function(x){
temp=t(mu_monthly)%*%x
coeff1*(1+temp)-z*sqrt((coeff1*(1+temp))^2-(1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2)
}
w=constrOptim(theta=x0,f=obj,ui=rbind(ones,-ones),ci=rbind(1,-1))$par
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
debugSource('C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium/portfolioVaR.R')
ui=rbind(ones,-ones)
ui
rbind(t(ones),-t(ones))
for(n in seq(12,1,-1)){
obj<-function(x){
temp=t(mu_monthly)%*%x
coeff1*(1+temp)-z*sqrt((coeff1*(1+temp))^2-(1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2)
}
w=constrOptim(theta=x0,f=obj,ui=rbind(t(ones),-t(ones)),ci=rbind(1,-1))$par
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
undebug()
undebug(l)
undebug(ls)
for(n in seq(12,1,-1)){
obj<-function(x){
temp=t(mu_monthly)%*%x
coeff1*(1+temp)-z*sqrt((coeff1*(1+temp))^2-(1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2)
}
w=constrOptim(theta=x0,f=obj,ui=rbind(t(ones),-t(ones)),ci=rbind(1,-1))$par
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
ui=rbind(t(ones),-t(ones))ci=rbind(1,-1)
ui=rbind(t(ones),-t(ones)),ci=rbind(1,-1)
ui=rbind(t(ones),-t(ones))
ci=rbind(1,-1)
ui%*%x0-ci
for(n in seq(12,1,-1)){
obj<-function(x){
temp=t(mu_monthly)%*%x
coeff1*(1+temp)-z*sqrt((coeff1*(1+temp))^2-(1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2)
}
w=constrOptim(theta=x0,f=obj,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))$par
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
optimalWeights
debugSource('C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium/portfolioVaR.R')
for(n in seq(12,1,-1)){
obj<-function(x){
temp=t(mu_monthly)%*%x
coeff1*(1+temp)-z*sqrt((coeff1*(1+temp))^2-(1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2)
}
w=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))$par
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
debugSource('C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium/portfolioVaR.R')
for(n in seq(12,1,-1)){
obj<-function(x){
print(x)
temp=t(mu_monthly)%*%x
coeff1*(1+temp)-z*sqrt((coeff1*(1+temp))^2-(1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2)
}
w=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))$par
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
for(n in seq(12,1,-1)){
obj<-function(x){
print(x)
temp=t(mu_monthly)%*%x
coeff1*(1+temp)-z*sqrt((coeff1*(1+temp))^2-(1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2)
}
w=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))$par
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
x0=c(1,0,0,0,0,0,0)
for(n in seq(12,1,-1)){
obj<-function(x){
print(x)
temp=t(mu_monthly)%*%x
coeff1*(1+temp)-z*sqrt((coeff1*(1+temp))^2-(1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2)
}
w=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))$par
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
sqrt(-1)
x0=matrix(c(1,0,0,0,0,0,0),ncol=1)
for(n in seq(12,1,-1)){
obj<-function(x){
print(x)
temp=t(mu_monthly)%*%x
coeff1*(1+temp)-z*sqrt((coeff1*(1+temp))^2-(1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2)
}
w=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))$par
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
library("dplyr")
library("plyr")
setwd("C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium")
#part 1
df=read.csv("pos.csv")
print(df)
aggregate(pos ~ user, df, sum)
netPos=ddply(df,c("user","sym"),function(x){sum(x$pos)})
write.csv(netPos,"output\\netPositions.csv")
library("dplyr")
library("plyr")
setwd("C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium")
#part 1
df=read.csv("pos.csv")
print(df)
netPos=ddply(df,c("user","sym"),function(x){sum(x$pos)})
write.csv(netPos,"output\\netPositions.csv")
#part 2
#groupby multiple columns and apply by multiple functions
boxPos<-function(x){
if (length(unique(x$pb))>1){#more than one broker
if(prod(x$pos)<0){
return(x)
}
}
}
write.csv(ddply(df,c("user","sym"),.fun=boxPos),file="output\\boxPositions.csv")
#Part 5
pos=read.csv("pos.csv")
trade=read.csv("trd.csv")
currentPositions=ddply(pos[,c("user","sym","pos")],c("user","sym"),function(x){sum(x$pos)})
colnames(currentPositions)=c("user","sym","pos")
currentPositions$key=paste(currentPositions$user,currentPositions$sym)
trade$key=paste(trade$user,trade$sym)
finalPositions=merge(currentPositions,trade,by.x="key",by.y="key",all=TRUE)
finalPositions$finalPos=rowSums(finalPositions[,c("pos","qty")],na.rm=T)
write.csv(finalPositions,"output\\finalPositions.csv")
df=read.csv("pos.csv")
print(df)
netPos=ddply(df,c("user","sym"),function(x){sum(x$pos)})
colnames(netPos)=c("user","sym","netPosition")
write.csv(netPos,"output\\netPositions.csv")
library("dplyr")
library("plyr")
library("lubridate")
setwd("C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium")
returns_raw=read.csv("input\\return.csv")
returns_raw$Date=as.POSIXct(returns_raw$Date)#Convert to date time
returns=returns_raw[returns_raw$Date<as.POSIXct("2016-01-01"),]#only choose dates before 2016-01-01
a=0.05
weights=matrix(c(0.15,0.15,0.15,0.2,0.05,0.2,0.1),ncol=1)
N=252#annualize
eps=0.00001
C=cov(returns[,2:dim(returns)[2]])
mu_daily=colMeans(returns[,2:dim(returns)[2]])
returns$Portfolio=as.matrix(returns[,2:dim(returns)[2]]) %*% weights#Portfolio return
#Part 1: historical
VaR1=-quantile(returns$Portfolio,a)*sqrt(N)
CVaR1=sum(sapply(seq(eps,a,by=eps),function(x){-quantile(returns$Portfolio,x)*sqrt(N)})*eps)/a
#Part 2: parametric
mu=mean(returns$Portfolio)*N
sigma=sqrt(t(weights)%*%C%*%weights)*sqrt(N) #annual vol
VaR2=-mu+sigma*qnorm(1-a,mean=0,sd=1) #Assume normal distribution and iid
CVaR2=sum(sapply(seq(eps,a,by=eps),
function(x){-mu+sigma*qnorm(1-x,mean=0,sd=1)})*eps)/a
#Part 3:dynamic optimization
optimalWeights=data.frame(matrix(nrow=12,
ncol=dim(returns_raw)[2]-1),row.names = seq(1,12))
colnames(optimalWeights)=colnames(returns_raw)[-1]
mu_monthly=matrix(mu_daily*21,ncol=1)
cov_monthly=C*21
#calculate the optimal weight dynamically
coeff1=1#1+mu*w
coeff2=1#1+2mu*w+w*cov*w
z=qnorm(0.95)
ones=matrix(1.0,nrow=dim(optimalWeights)[2],ncol=1)
#x0=ones/dim(optimalWeights)[2]#initial guess
x0=matrix(c(1,0,0,0,0,0,0),ncol=1)
for(n in seq(12,1,-1)){
obj<-function(x){
print(x)
temp=t(mu_monthly)%*%x
coeff1*(1+temp)-z*sqrt((1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2-(coeff1*(1+temp))^2)
}
w=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))$par
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
optimalWeights
#Part 3:dynamic optimization
optimalWeights=data.frame(matrix(nrow=12,
ncol=dim(returns_raw)[2]-1),row.names = seq(1,12))
colnames(optimalWeights)=colnames(returns_raw)[-1]
mu_monthly=matrix(mu_daily*21,ncol=1)
cov_monthly=C*21
#calculate the optimal weight dynamically
coeff1=1#1+mu*w
coeff2=1#1+2mu*w+w*cov*w
z=qnorm(0.95)
ones=matrix(1.0,nrow=dim(optimalWeights)[2],ncol=1)
#x0=ones/dim(optimalWeights)[2]#initial guess
x0=matrix(c(1,0,0,0,0,0,0),ncol=1)
for(n in seq(12,1,-1)){
obj<-function(x){
temp=t(mu_monthly)%*%x
coeff1*(1+temp)-z*sqrt((1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2-(coeff1*(1+temp))^2)
}
res=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))
w=res$par
print(res$value)
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
for(n in seq(12,1,-1)){
obj<-function(x){
temp=t(mu_monthly)%*%x
-(coeff1*(1+temp)-z*sqrt((1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2-(coeff1*(1+temp))^2))
}
res=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))
w=res$par
print(res$value)
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
optimalWeights
for(n in seq(12,1,-1)){
obj<-function(x){
temp=t(mu_monthly)%*%x
-(coeff1*(1+temp)-z*sqrt((1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2-(coeff1*(1+temp))^2))
}
res=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))
w=res$par
print(res$value)
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
print(coeff1)
print(coeff2)
}
debugSource('C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium/portfolioVaR.R')
coeff1
coeff2
optimalWeights
optimalWeights
for(n in seq(12,1,-1)){
obj<-function(x){
temp=t(mu_monthly)%*%x
-(coeff1*(1+temp)-z*sqrt((1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2-(coeff1*(1+temp))^2))
}
res=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))
w=res$par
print(res$value)
optimalWeights[n,]=w
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
debugSource('C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium/portfolioVaR.R')
optimalWeights
write.csv(optimalWeights,"optimalWeights.csv")
optimalWeights=data.frame(matrix(nrow=12,
ncol=dim(returns_raw)[2]),row.names = seq(1,12))
colnames(optimalWeights)=c(colnames(returns_raw)[-1],"VaR_0.95")
mu_monthly=matrix(mu_daily*21,ncol=1)
cov_monthly=C*21
#calculate the optimal weight dynamically
coeff1=1#1+mu*w
coeff2=1#1+2mu*w+w*cov*w
z=qnorm(0.95)
ones=matrix(1.0,nrow=dim(optimalWeights)[2],ncol=1)
#x0=ones/dim(optimalWeights)[2]#initial guess
x0=matrix(c(1,0,0,0,0,0,0),ncol=1)
for(n in seq(12,1,-1)){
print(n)
obj<-function(x){
temp=t(mu_monthly)%*%x
-(coeff1*(1+temp)-z*sqrt((1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2-(coeff1*(1+temp))^2))
}
res=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))
w=res$par
print(res$value)
optimalWeights[n,-dim(optimalWeights)[2]]=w
optimalWeights[n,dim(optimalWeights)[2]]=res$value
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
#Part 3:dynamic optimization
optimalWeights=data.frame(matrix(nrow=12,
ncol=dim(returns_raw)[2]),row.names = seq(1,12))
colnames(optimalWeights)=c(colnames(returns_raw)[-1],"VaR_0.95")
mu_monthly=matrix(mu_daily*21,ncol=1)
cov_monthly=C*21
#calculate the optimal weight dynamically
coeff1=1#1+mu*w
coeff2=1#1+2mu*w+w*cov*w
z=qnorm(0.95)
ones=matrix(1.0,nrow=dim(optimalWeights)[2]-1,ncol=1)
#x0=ones/dim(optimalWeights)[2]#initial guess
x0=matrix(c(1,0,0,0,0,0,0),ncol=1)
for(n in seq(12,1,-1)){
print(n)
obj<-function(x){
temp=t(mu_monthly)%*%x
-(coeff1*(1+temp)-z*sqrt((1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2-(coeff1*(1+temp))^2))
}
res=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))
w=res$par
print(res$value)
optimalWeights[n,-dim(optimalWeights)[2]]=w
optimalWeights[n,dim(optimalWeights)[2]]=res$value
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
optimalWeights
optimalWeights=data.frame(matrix(nrow=12,
ncol=dim(returns_raw)[2]),row.names = seq(1,12))
colnames(optimalWeights)=c(colnames(returns_raw)[-1],"optimal value")
mu_monthly=matrix(mu_daily*21,ncol=1)
cov_monthly=C*21
#calculate the optimal weight dynamically
coeff1=1#1+mu*w
coeff2=1#1+2mu*w+w*cov*w
z=qnorm(0.95)
ones=matrix(1.0,nrow=dim(optimalWeights)[2]-1,ncol=1)
#x0=ones/dim(optimalWeights)[2]#initial guess
x0=matrix(c(1,0,0,0,0,0,0),ncol=1)
for(n in seq(12,1,-1)){
print(n)
obj<-function(x){
temp=t(mu_monthly)%*%x
-(coeff1*(1+temp)-z*sqrt((1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2-(coeff1*(1+temp))^2))
}
res=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))
w=res$par
print(res$value)
optimalWeights[n,-dim(optimalWeights)[2]]=w
optimalWeights[n,dim(optimalWeights)[2]]=res$value
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
optimalWeights=data.frame(matrix(nrow=12,
ncol=dim(returns_raw)[2]),row.names = seq(1,12))
colnames(optimalWeights)=c(colnames(returns_raw)[-1],"optimal value")
mu_monthly=matrix(mu_daily*21,ncol=1)
cov_monthly=C*21
#calculate the optimal weight dynamically
coeff1=1#1+mu*w
coeff2=1#1+2mu*w+w*cov*w
z=qnorm(0.95)
ones=matrix(1.0,nrow=dim(optimalWeights)[2]-1,ncol=1)
#x0=ones/dim(optimalWeights)[2]#initial guess
x0=matrix(c(1,0,0,0,0,0,0),ncol=1)
for(n in seq(12,1,-1)){
print(n)
obj<-function(x){
temp=t(mu_monthly)%*%x
-(coeff1*(1+temp)-z*sqrt((1+2*temp+t(x)%*%cov_monthly%*%x)*coeff2-(coeff1*(1+temp))^2))
}
res=constrOptim(theta=x0,f=obj,grad=NULL,ui=rbind(t(ones),-t(ones)),ci=rbind(0.9999,-1.0001))
w=res$par
print(res$value)
optimalWeights[n,-dim(optimalWeights)[2]]=w
optimalWeights[n,dim(optimalWeights)[2]]=-res$value
coeff1=coeff1*(1+t(mu_monthly)%*%w)
coeff2=coeff2*(1+2*t(mu_monthly)%*%w+t(w)%*%cov_monthly%*%w)
}
optimalWeights
write.csv(optimalWeights,"optimalWeights.csv")
pos=read.csv("pos.csv")
trade=read.csv("trd.csv")
trade
debugSource('C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium/PositionCalculator.R')
pos=read.csv("input\\pos.csv")
trade=read.csv("input\\trd.csv")
debugSource('C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium/PositionCalculator.R')
ddply(trade,c("sym","user"),sum)
ddply(trade,c("sym","user"),.fun=sum)
debugSource('C:/Users/AndrewZeng/Desktop/2016/Interview_Prepare/Millennium/PositionCalculator.R')
